--
-- Fichier généré par SQLiteStudio v3.2.1 sur jeu. oct. 28 15:34:46 2021
--
-- Encodage texte utilisé : System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table : CC_STATUS
DROP TABLE IF EXISTS CC_STATUS;
CREATE TABLE CC_STATUS (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, STATUS STRING NOT NULL);
INSERT INTO CC_STATUS (ID, STATUS) VALUES (1, 'STARTED');
INSERT INTO CC_STATUS (ID, STATUS) VALUES (2, 'APPROVED');
INSERT INTO CC_STATUS (ID, STATUS) VALUES (3, 'REJECTED');
INSERT INTO CC_STATUS (ID, STATUS) VALUES (4, 'SUSPENDED');
INSERT INTO CC_STATUS (ID, STATUS) VALUES (5, 'CLOSED');
INSERT INTO CC_STATUS (ID, STATUS) VALUES (6, 'WITHDRAW');

-- Table : CONF_CHANGE
DROP TABLE IF EXISTS CONF_CHANGE;
CREATE TABLE CONF_CHANGE (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, REQ_ID INTEGER REFERENCES REQUIREMENT (ID) NOT NULL, DESCRIPTION TEXT, STATUS INTEGER NOT NULL REFERENCES CC_STATUS (ID));

-- Table : DOC_TYPE
DROP TABLE IF EXISTS DOC_TYPE;
CREATE TABLE DOC_TYPE (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, TYPE STRING NOT NULL, DESCRIPTION TEXT);
INSERT INTO DOC_TYPE (ID, TYPE, DESCRIPTION) VALUES (1, 'SP', 'Specification document. Contains a set of requirements applicable to a PT element');
INSERT INTO DOC_TYPE (ID, TYPE, DESCRIPTION) VALUES (2, 'ICD', 'Interface Control Document. Contains Interfaces description between two PT elements');

-- Table : DOCUMENT
DROP TABLE IF EXISTS DOCUMENT;
CREATE TABLE DOCUMENT (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, PT_ID INTEGER REFERENCES PT (ID) NOT NULL, TYPE INTEGER NOT NULL REFERENCES DOC_TYPE (ID), TITLE STRING NOT NULL UNIQUE, DESCRIPTION TEXT);

-- Table : IF_CHAPTER
DROP TABLE IF EXISTS IF_CHAPTER;
CREATE TABLE IF_CHAPTER (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, CHAPTER STRING NOT NULL);

-- Table : IF_IMAGE
DROP TABLE IF EXISTS IF_IMAGE;
CREATE TABLE IF_IMAGE (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, IF_ID INTEGER REFERENCES INTERFACE (ID) NOT NULL, LEGEND TEXT, IMAGE BLOB NOT NULL);

-- Table : INTERFACE
DROP TABLE IF EXISTS INTERFACE;
CREATE TABLE INTERFACE (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, ELEMENT1 INTEGER REFERENCES PT (ID) NOT NULL, ELEMENT2 INTEGER REFERENCES PT (ID) NOT NULL, DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, DESCRIPTION TEXT, DOC_CHAPTER INTEGER REFERENCES IF_CHAPTER (ID));

-- Table : MODEL
DROP TABLE IF EXISTS MODEL;
CREATE TABLE MODEL (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, MODEL STRING UNIQUE NOT NULL);
INSERT INTO MODEL (ID, MODEL) VALUES (1, 'PROTO');
INSERT INTO MODEL (ID, MODEL) VALUES (2, 'EM');
INSERT INTO MODEL (ID, MODEL) VALUES (3, 'STM');
INSERT INTO MODEL (ID, MODEL) VALUES (4, 'QM');
INSERT INTO MODEL (ID, MODEL) VALUES (5, 'FM');

-- Table : PART
DROP TABLE IF EXISTS PART;
CREATE TABLE PART (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, PT_ID INTEGER REFERENCES PT (ID) NOT NULL, NAME STRING NOT NULL UNIQUE, SERIAL INTEGER UNIQUE NOT NULL, MODEL INTEGER REFERENCES MODEL (ID) NOT NULL, DESCRIPTION TEXT);

-- Table : PT
DROP TABLE IF EXISTS PT;
CREATE TABLE PT (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, NAME STRING NOT NULL UNIQUE, PARENT INTEGER REFERENCES PT (ID));

-- Table : REDMINE_ISSUES
DROP TABLE IF EXISTS REDMINE_ISSUES;
CREATE TABLE REDMINE_ISSUES (REDMINE_ID INTEGER PRIMARY KEY UNIQUE NOT NULL, REQ_ID INTEGER REFERENCES REQUIREMENT (ID) NOT NULL);

-- Table : REQ_CHAPTER
DROP TABLE IF EXISTS REQ_CHAPTER;
CREATE TABLE REQ_CHAPTER (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, CHAPTER STRING NOT NULL);

-- Table : REQ_IMAGE
DROP TABLE IF EXISTS REQ_IMAGE;
CREATE TABLE REQ_IMAGE (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, REQ_ID INTEGER NOT NULL REFERENCES REQUIREMENT (ID), LEGEND TEXT, IMAGE BLOB NOT NULL);

-- Table : REQ_LOGS
DROP TABLE IF EXISTS REQ_LOGS;
CREATE TABLE REQ_LOGS (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, REQ_ID INTEGER REFERENCES REQUIREMENT (ID) NOT NULL, OLD_PT_ID INTEGER REFERENCES PT (ID) NOT NULL, NEW_PT_ID INTEGER REFERENCES PT (ID) NOT NULL, OLD_DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, NEW_DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, OLD_DOC_CHAPTER INTEGER REFERENCES REQ_CHAPTER (ID), NEW_DOC_CHAPTER INTEGER REFERENCES REQ_CHAPTER (ID), OLD_TITLE STRING NOT NULL, NEW_TITLE STRING NOT NULL, OLD_DESCRIPTION TEXT, NEW_DESCRIPTION TEXT, OLD_TYPE INTEGER REFERENCES REQ_TYPE (ID) NOT NULL, NEW_TYPE INTEGER REFERENCES REQ_TYPE (ID) NOT NULL, OLD_STATUS INTEGER REFERENCES REQ_STATUS (ID) NOT NULL, NEW_STATUS INTEGER REFERENCES REQ_STATUS (ID) NOT NULL, OLD_SOURCE STRING, NEW_SOURCE STRING, OLD_PARENT_ID INTEGER REFERENCES REQUIREMENT (ID), NEW_PARENT_ID INTEGER REFERENCES REQUIREMENT (ID), OLD_VERIF_LEVEL STRING, NEW_VERIF_LEVEL STRING, OLD_VERIF_METHOD INTEGER REFERENCES REQ_METHOD (ID) NOT NULL, NEW_VERIF_METHOD INTEGER REFERENCES REQ_METHOD (ID) NOT NULL, OLD_COMMENTS TEXT, NEW_COMMENTS TEXT, USER_ACTION TEXT NOT NULL, LOG_TIME DATETIME NOT NULL);

-- Table : REQ_METHOD
DROP TABLE IF EXISTS REQ_METHOD;
CREATE TABLE REQ_METHOD (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, METHOD STRING NOT NULL);
INSERT INTO REQ_METHOD (ID, METHOD) VALUES (1, 'Analysis');
INSERT INTO REQ_METHOD (ID, METHOD) VALUES (2, 'Test');
INSERT INTO REQ_METHOD (ID, METHOD) VALUES (3, 'Review of design');

-- Table : REQ_STATUS
DROP TABLE IF EXISTS REQ_STATUS;
CREATE TABLE REQ_STATUS (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, SHORTCUT STRING UNIQUE NOT NULL, STATUS STRING NOT NULL UNIQUE);
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (1, 'D', 'Draft');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (2, 'R', 'Review');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (3, 'W', 'Rework');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (4, 'F', 'Finish');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (5, 'I', 'Implemented');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (6, 'V', 'Valid');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (7, 'N', 'Non Testable');
INSERT INTO REQ_STATUS (ID, SHORTCUT, STATUS) VALUES (8, 'O', 'Obsolete');

-- Table : REQ_TYPE
DROP TABLE IF EXISTS REQ_TYPE;
CREATE TABLE REQ_TYPE (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, TYPE STRING NOT NULL UNIQUE);
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (1, 'Informational');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (2, 'Feature');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (3, 'Use Case');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (4, 'User Interface');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (5, 'Non Functional');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (6, 'Constraint');
INSERT INTO REQ_TYPE (ID, TYPE) VALUES (7, 'System Function');

-- Table : REQUIREMENT
DROP TABLE IF EXISTS REQUIREMENT;
CREATE TABLE REQUIREMENT (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, PT_ID INTEGER REFERENCES PT (ID) NOT NULL, CODE STRING UNIQUE NOT NULL, DOC_ID INTEGER REFERENCES DOCUMENT (ID) NOT NULL, DOC_CHAPTER INTEGER REFERENCES REQ_CHAPTER (ID), TITLE STRING NOT NULL UNIQUE, DESCRIPTION TEXT, TYPE INTEGER NOT NULL REFERENCES REQ_TYPE (ID), STATUS INTEGER NOT NULL REFERENCES REQ_STATUS (ID), SOURCE STRING, PARENT_ID INTEGER REFERENCES REQUIREMENT (ID), VERIF_LEVEL TEXT, VERIF_METHOD INTEGER NOT NULL REFERENCES REQ_METHOD (ID), COMMENTS TEXT);

-- Index : idx_code
DROP INDEX IF EXISTS idx_code;
CREATE UNIQUE INDEX idx_code ON REQUIREMENT (CODE ASC);

-- Déclencheur : REQ_DELETE
DROP TRIGGER IF EXISTS REQ_DELETE;
CREATE TRIGGER REQ_DELETE AFTER DELETE ON REQUIREMENT FOR EACH ROW BEGIN INSERT INTO REQ_LOGS (REQ_ID, OLD_PT_ID, NEW_PT_ID, OLD_DOC_ID, NEW_DOC_ID, OLD_DOC_CHAPTER, NEW_DOC_CHAPTER, OLD_TITLE, NEW_TITLE, OLD_DESCRIPTION, NEW_DESCRIPTION, OLD_TYPE, NEW_TYPE, OLD_STATUS, NEW_STATUS, OLD_SOURCE, NEW_SOURCE, OLD_PARENT_ID, NEW_PARENT_ID, OLD_VERIF_LEVEL, NEW_VERIF_LEVEL, OLD_VERIF_METHOD, NEW_VERIF_METHOD, OLD_COMMENTS, NEW_COMMENTS, USER_ACTION, LOG_TIME) VALUES (OLD.ID, OLD.PT_ID, OLD.PT_ID, OLD.DOC_ID, OLD.DOC_ID, OLD.DOC_CHAPTER, OLD.DOC_CHAPTER, OLD.TITLE, OLD.TITLE, OLD.DESCRIPTION, OLD.DESCRIPTION, OLD.TYPE, OLD.TYPE, OLD.STATUS, OLD.STATUS, OLD.SOURCE, OLD.SOURCE, OLD.PARENT_ID, OLD.PARENT_ID, OLD.VERIF_LEVEL, OLD.VERIF_LEVEL, OLD.VERIF_METHOD, OLD.VERIF_METHOD, OLD.COMMENTS, OLD.COMMENTS, 'DELETE', DATETIME('NOW')); END;

-- Déclencheur : REQ_NEW
DROP TRIGGER IF EXISTS REQ_NEW;
CREATE TRIGGER REQ_NEW AFTER INSERT ON REQUIREMENT FOR EACH ROW BEGIN INSERT INTO REQ_LOGS (REQ_ID, OLD_PT_ID, NEW_PT_ID, OLD_DOC_ID, NEW_DOC_ID, OLD_DOC_CHAPTER, NEW_DOC_CHAPTER, OLD_TITLE, NEW_TITLE, OLD_DESCRIPTION, NEW_DESCRIPTION, OLD_TYPE, NEW_TYPE, OLD_STATUS, NEW_STATUS, OLD_SOURCE, NEW_SOURCE, OLD_PARENT_ID, NEW_PARENT_ID, OLD_VERIF_LEVEL, NEW_VERIF_LEVEL, OLD_VERIF_METHOD, NEW_VERIF_METHOD, OLD_COMMENTS, NEW_COMMENTS, USER_ACTION, LOG_TIME) VALUES (NEW.ID, NEW.PT_ID, NEW.PT_ID, NEW.DOC_ID, NEW.DOC_ID, NEW.DOC_CHAPTER, NEW.DOC_CHAPTER, NEW.TITLE, NEW.TITLE, NEW.DESCRIPTION, NEW.DESCRIPTION, NEW.TYPE, NEW.TYPE, NEW.STATUS, NEW.STATUS, NEW.SOURCE, NEW.SOURCE, NEW.PARENT_ID, NEW.PARENT_ID, NEW.VERIF_LEVEL, NEW.VERIF_LEVEL, NEW.VERIF_METHOD, NEW.VERIF_METHOD, NEW.COMMENTS, NEW.COMMENTS, 'NEW', DATETIME('NOW')); END;

-- Déclencheur : REQ_UPDATE
DROP TRIGGER IF EXISTS REQ_UPDATE;
CREATE TRIGGER REQ_UPDATE AFTER UPDATE ON REQUIREMENT FOR EACH ROW BEGIN INSERT INTO REQ_LOGS (REQ_ID, OLD_PT_ID, NEW_PT_ID, OLD_DOC_ID, NEW_DOC_ID, OLD_DOC_CHAPTER, NEW_DOC_CHAPTER, OLD_TITLE, NEW_TITLE, OLD_DESCRIPTION, NEW_DESCRIPTION, OLD_TYPE, NEW_TYPE, OLD_STATUS, NEW_STATUS, OLD_SOURCE, NEW_SOURCE, OLD_PARENT_ID, NEW_PARENT_ID, OLD_VERIF_LEVEL, NEW_VERIF_LEVEL, OLD_VERIF_METHOD, NEW_VERIF_METHOD, OLD_COMMENTS, NEW_COMMENTS, USER_ACTION, LOG_TIME) VALUES (OLD.ID, OLD.PT_ID, NEW.PT_ID, OLD.DOC_ID, NEW.DOC_ID, OLD.DOC_CHAPTER, NEW.DOC_CHAPTER, OLD.TITLE, NEW.TITLE, OLD.DESCRIPTION, NEW.DESCRIPTION, OLD.TYPE, NEW.TYPE, OLD.STATUS, NEW.STATUS, OLD.SOURCE, NEW.SOURCE, OLD.PARENT_ID, NEW.PARENT_ID, OLD.VERIF_LEVEL, NEW.VERIF_LEVEL, OLD.VERIF_METHOD, NEW.VERIF_METHOD, OLD.COMMENTS, NEW.COMMENTS, 'UPDATE', DATETIME('NOW')); END;

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
